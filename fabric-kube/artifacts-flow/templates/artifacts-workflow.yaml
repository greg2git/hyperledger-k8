{{- $vars:= dict}}
# useActualDomains: {{ $.Values.useActualDomains }}

apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: hlf-artifacts-
spec:
  entrypoint: artifacts

  volumes:
  - name: hlf-scripts
    configMap:
      name: hlf-scripts
      defaultMode: 0777 # make scripts executable

  #orderer volumes
  {{- range $i, $org := .Values.OrdererOrgs }}
  - name: hlf-ca--{{ $org.Name | lower }}
    persistentVolumeClaim:
      claimName: hlf-ca--{{ $org.Name | lower }}

  - name: hlf-orderer--{{ $org.Name | lower }}
    persistentVolumeClaim:
      claimName: hlf-orderer--{{ $org.Name | lower }}

  {{- range $i, $host := $org.Specs }}
  - name: hlf-orderer--{{ $org.Name | lower }}--{{ $host.Hostname | lower }}
    persistentVolumeClaim:
      claimName: hlf-orderer--{{ $org.Name | lower }}--{{ $host.Hostname | lower }}

  {{- end }} {{- /* orderer hosts */ -}}{{""}}
  {{- end }} {{- /* orderer orgs */ -}}{{""}}

  #peer org volumes
  {{- range $i, $org := .Values.PeerOrgs }}
  - name: hlf-peer-org--{{ $org.Name | lower }}
    persistentVolumeClaim:
      claimName: hlf-peer-org--{{ $org.Name | lower }}

  - name: hlf-ca--{{ $org.Name | lower }}
    persistentVolumeClaim:
      claimName: hlf-ca--{{ $org.Name | lower }}

  {{- range $peerIndex := until ($org.Template.Count | int) }}
  {{- $peer := (printf "peer%s" ($peerIndex | toString)) }}

  - name: hlf-peer--{{ $org.Name | lower }}--{{ $peer | lower }}
    persistentVolumeClaim:
      claimName: hlf-peer--{{ $org.Name | lower }}--{{ $peer | lower }}

  {{- end }} {{- /* peers */ -}}{{""}}
  {{- end }} {{- /* peer orgs */ -}}{{""}}

  #{{- range $i, $org := .Values.PeerOrgs }}
  - name: channel-artifacts
    persistentVolumeClaim:
      claimName: channel-artifacts
  #{{- end }} {{- /* channel artifacts */ -}}{{""}}
  - name: hlf-configtx
    secret:
      secretName: hlf-configtx.yaml
      items:
      - key: configtx.yaml
        path: configtx/configtx.yaml

  templates:
  - name: artifacts
    steps:

# top level: register orderer identities
{{- $_ := set $vars "firstStep" true }}
{{- range $i, $ordererOrg := .Values.OrdererOrgs  }}

{{- if or $vars.firstStep (not $.Values.flow.orderer.parallel) }}
    -
{{- end }}
      - name: orderer--{{ $ordererOrg.Name | lower }}
        template: orderer--{{ $ordererOrg.Name  | lower }}

{{- $_ := set $vars "firstStep" false }}
{{- end }} {{- /* orderers */ -}}{{""}}

{{- $_ := set $vars "secondStep" true }}
{{- range $i, $org := .Values.PeerOrgs  }}

{{- if or $vars.secondStep (not $.Values.flow.peerorgs.parallel) }}
    -
{{- end }}
      - name: peer-org--{{ $org.Name | lower }}
        template: peer-org--{{ $org.Name  | lower }}

{{- $_ := set $vars "secondStep" false }}
{{- end }} {{- /* peer orgs */ -}}{{""}}


# third level: generate artifacts
{{- $_ := set $vars "thirdStep" true }}

    -
      - name: generate-channel-artifacts
        template: generate-channel-artifacts

{{- $_ := set $vars "thirdStep" false }}


{{- range $i, $ordererOrg := .Values.OrdererOrgs  }}
  - name: orderer--{{ $ordererOrg.Name | lower }}
    steps:
    - - name: register-orderer-identies--{{ $ordererOrg.Name  | lower }}
        template: register-orderer-identies--{{ $ordererOrg.Name  | lower }}
{{/*    - - name: get-orderer-ca-cert--{{ $ordererOrg.Name | lower }}*/}}
{{/*        template: get-orderer-ca-cert--{{ $ordererOrg.Name  | lower }}*/}}
    - - name: generate-orderer-admin-ca-cert--{{ $ordererOrg.Name | lower }}
        template: generate-orderer-admin-ca-cert--{{ $ordererOrg.Name | lower }}
    {{- range $i, $host := $ordererOrg.Specs }}
    - - name: generate-orderer-host--{{ $ordererOrg.Name  | lower }}--{{ $host.Hostname  | lower }}
        template: generate-orderer-host--{{ $ordererOrg.Name  | lower }}--{{ $host.Hostname  | lower }}
    {{- end }} {{- /* orderers hosts */ -}}{{""}}
{{- end }} {{- /* orderers */ -}}{{""}}

{{- range $i, $ordererOrg := .Values.OrdererOrgs  }}
{{- range $i, $host := $ordererOrg.Specs }}
  - name: generate-orderer-host--{{ $ordererOrg.Name  | lower }}--{{ $host.Hostname  | lower }}
    steps:
    - -  name: generate-orderer-host-generate-certs--{{ $ordererOrg.Name | lower }}--{{ $host.Hostname | lower }}
         template: generate-orderer-host-generate-certs--{{ $ordererOrg.Name | lower }}--{{ $host.Hostname | lower }}
{{- end }} {{- /* orderers hosts */ -}}{{""}}
{{- end }} {{- /* orderers */ -}}{{""}}



{{- range $i, $org := .Values.PeerOrgs  }}
  - name: peer-org--{{ $org.Name | lower }}
    steps:
    - - name: register-peer-org-identities--{{ $org.Name  | lower }}
        template: register-peer-org-identities--{{ $org.Name  | lower }}
    - - name: get-peer-org-ca-cert--{{ $org.Name | lower }}
        template: get-peer-org-ca-cert--{{ $org.Name  | lower }}
        {{- range $peerIndex := until ($org.Template.Count | int) }}
        {{- $peer := (printf "peer%s" ($peerIndex | toString)) }}
    - - name: peer--{{ $org.Name  | lower }}--{{ $peer  | lower }}
        template: peer--{{ $org.Name  | lower }}--{{ $peer  | lower }}
        {{- end }} {{- /* peers */ -}}{{""}}
{{- end }} {{- /* peer orgs */ -}}{{""}}

{{- range $i, $org := .Values.PeerOrgs  }}
{{- range $peerIndex := until ($org.Template.Count | int) }}
{{- $peer := (printf "peer%s" ($peerIndex | toString)) }}
  - name: peer--{{ $org.Name  | lower }}--{{ $peer  | lower }}
    steps:
    - - name: peer-generate-certs--{{ $org.Name | lower }}--{{ $peer | lower }}
        template: peer-generate-certs--{{ $org.Name | lower }}--{{ $peer | lower }}
{{- end }} {{- /* peers */ -}}{{""}}
{{- end }} {{- /* peer  orgs */ -}}{{""}}

# leaf register orderer identity templates
{{- range $i, $ordererOrg := .Values.OrdererOrgs }}
  - name: register-orderer-identies--{{ $ordererOrg.Name | lower }}
    inputs:
    retryStrategy:
      limit: {{ $.Values.retryCount }}
    script:
      image: c0deh0use/fabric-ca-client-tools:{{ $.Values.FabricCaClientVersion }}
      command: [sh]
      source: |
          if [ ! -f "/{{ $ordererOrg.Domain }}/{{ printf "orderers.%s.registred" $ordererOrg.Domain }}" ]; then

            echo "--- Enrolling with https://$CA_ADMIN_USER_PASS@$CA_HOST:7054"
            fabric-ca-client enroll -d -u https://$CA_ADMIN_USER_PASS@$CA_HOST:7054 --caname {{ printf "ca-%s" $ordererOrg.Name }} --tls.certfiles $FABRIC_CA_CLIENT_TLS_CERTFILES
            echo "------"

            echo "checking {{ $ordererOrg.Name }} orderer root dir..."
            find $FABRIC_CA_CLIENT_HOME
            echo "------"

            {{- range $i, $host := $ordererOrg.Specs }}
            echo "--- Registering {{ $host.Hostname }} from {{ $ordererOrg.Name }} with $CA_HOST"
            export ORDERER_NAME={{ $host.Hostname }}-{{ $ordererOrg.Name | lower }}
            export ORDERER_PASS={{ $host.Hostname }}-{{ $ordererOrg.Name | lower }}pw
            fabric-ca-client register -d --id.name $ORDERER_NAME --id.secret $ORDERER_PASS --id.type orderer --caname {{ printf "ca-%s" $ordererOrg.Name }} --tls.certfiles $FABRIC_CA_CLIENT_TLS_CERTFILES
            echo "------"
            {{- end }}

            echo "--- Registering admin identity with "$CA_HOST
            #The admin identity has the "admin" attribute which is added to ECert by default
            fabric-ca-client register -d --id.name $ORDERER_ADMIN_NAME --id.secret $ORDERER_ADMIN_PASS --id.type admin --id.attrs "admin=true:ecert" --caname {{ printf "ca-%s" $ordererOrg.Name }} --tls.certfiles $FABRIC_CA_CLIENT_TLS_CERTFILES
            echo "------"
            echo "------"

            echo "Orderer Identities Registered" > /{{ $ordererOrg.Domain }}/{{ printf "orderers.%s.registred" $ordererOrg.Domain }}
            echo "----- Orderer {{ $ordererOrg.Name }} Identities Registered ----"
            echo "find /{{ $ordererOrg.Domain }}"
            find /{{ $ordererOrg.Domain }}
          else
            echo "Org-"{{ $ordererOrg.Name | lower }}" already registered with network"
          fi

      volumeMounts:
        - mountPath: /hlf-scripts
          name: hlf-scripts

        - mountPath: /{{ $ordererOrg.Domain }}
          name: hlf-orderer--{{ $ordererOrg.Name | lower }}

        - mountPath: /{{ $ordererOrg.Domain }}/fabric-ca
          name: hlf-ca--{{ $ordererOrg.Name | lower }}


      env:
        - name: FABRIC_LOGGING_SPEC
          value: {{ $.Values.logLevel }}
        - name: CA_ADMIN_USER
          value: {{ $.Values.ca.userName }}
        - name: CA_ADMIN_PASS
          value: {{ $.Values.ca.password }}
        - name: CA_ADMIN_USER_PASS
          value: {{ $.Values.ca.userName }}:{{ $.Values.ca.password }}
        - name: CA_HOST
          value: hlf-ca--{{ $ordererOrg.Name | lower }}
        - name: ORDERER_ADMIN_NAME
          value: admin-{{ $ordererOrg.Name | lower }}
        - name: ORDERER_ADMIN_PASS
          value: admin-{{ $ordererOrg.Name | lower }}pw
        - name: FABRIC_CA_CLIENT_HOME
          value: /{{ $ordererOrg.Domain }}
        - name: FABRIC_CA_CLIENT_TLS_CERTFILES
          value: /{{ $ordererOrg.Domain }}/fabric-ca/tls-cert.pem

{{- end }} {{- /* ordererOrgs */ -}}{{""}}


# leaf register peer org identity registertemplates
{{- range $i, $org := .Values.PeerOrgs }}
  - name: register-peer-org-identities--{{ $org.Name | lower }}
    inputs:
    retryStrategy:
      limit: {{ $.Values.retryCount }}
    script:
      image: c0deh0use/fabric-ca-client-tools:{{ $.Values.FabricCaClientVersion }}
      command: [sh]
      source: |
          find /{{ $org.Domain | lower }}

          if [ ! -f "/{{ $org.Domain | lower }}/{{ printf "peers.%s.registred" $org.Domain }}" ]; then
            FABRIC_CA_DYNAMIC_LINK=false
            if [ "\$FABRIC_CA_DYNAMIC_LINK" = "true" ]; then apt-get install -y libltdl-dev; fi

            echo "--- Enrolling with https://$CA_ADMIN_USER_PASS@$CA_HOST:7054"
            fabric-ca-client enroll -d -u https://$CA_ADMIN_USER_PASS@$CA_HOST:7054 --caname {{ printf "ca-%s" $org.Name }} --tls.certfiles $FABRIC_CA_CLIENT_TLS_CERTFILES
            echo "------"

            echo "--- Registering org admin identity with $CA_HOST"
            #The admin identity has the "admin" attribute which is added to ECert by default

            fabric-ca-client register -d --caname $CA_NAME --id.name $PEER_ADMIN_NAME --id.secret $PEER_ADMIN_PASS --id.type admin --caname {{ printf "ca-%s" $org.Name }} --tls.certfiles $FABRIC_CA_CLIENT_TLS_CERTFILES
            echo "------"

            {{- range $peerIndex := until ($org.Template.Count | int) }}
            {{- $peer := (printf "peer%s" ($peerIndex | toString)) }}

            export PEER_NAME={{ $peer }}-{{ $org.Name | lower }}
            export PEER_PASS={{ $peer }}-{{ $org.Name | lower }}pw

            echo "--- Registering Peer: $PEER_NAME"
            fabric-ca-client register -d --caname $CA_NAME --id.name $PEER_NAME --id.secret $PEER_PASS --id.type peer --caname {{ printf "ca-%s" $org.Name }} --tls.certfiles $FABRIC_CA_CLIENT_TLS_CERTFILES
            echo "------"
            {{- end }}

            log "--- Registering peer client: $PEER_USER_NAME identity with $CA_NAME"
            fabric-ca-client register -d --caname $CA_NAME --id.name $PEER_USER_NAME --id.secret $PEER_USER_PASS ---id.type client --caname {{ printf "ca-%s" $org.Name }} --tls.certfiles $FABRIC_CA_CLIENT_TLS_CERTFILES
            echo "------"

            echo "Peer Identities Registered" > /{{ $org.Domain | lower }}/{{ printf "peers.%s.registred" $org.Domain }}
            echo "------ Peer {{ $org.Name }} Identities registred ------"
            echo "find /{{ $org.Domain | lower }}"
            find /{{ $org.Domain | lower }}
          else
            echo "Org "{{ $org.Name | lower }}" identity already registerd with the network"
          fi


      volumeMounts:
        - mountPath: /hlf-scripts
          name: hlf-scripts
        - mountPath: /{{ $org.Domain | lower }}
          name: hlf-peer-org--{{ $org.Name | lower }}
        - mountPath: /{{ $org.Domain }}/fabric-ca
          name: hlf-ca--{{ $org.Name | lower }}


      env:
        - name: FABRIC_LOGGING_SPEC
          value: {{ $.Values.logLevel }}
        - name: CA_NAME
          value: ca-{{ $org.Name }}
        - name: CA_ADMIN_USER
          value: {{ $.Values.ca.userName }}
        - name: CA_ADMIN_PASS
          value: {{ $.Values.ca.password }}
        - name: CA_ADMIN_USER_PASS
          value: {{ $.Values.ca.userName }}:{{ $.Values.ca.password }}
        - name: CA_HOST
          value: hlf-ca--{{ $org.Name | lower }}
        - name: PEER_ADMIN_NAME
          value: admin-{{ $org.Name | lower }}
        - name: PEER_ADMIN_PASS
          value: admin-{{ $org.Name | lower }}pw
        - name: PEER_NAME
          value: peer-{{ $org.Name | lower }}
        - name: PEER_PASS
          value: peer-{{ $org.Name | lower }}pw
        - name: PEER_USER_NAME
          value: user-{{ $org.Name | lower }}
        - name: PEER_USER_PASS
          value: user-{{ $org.Name | lower }}pw
        - name: FABRIC_CA_CLIENT_HOME
          value: /{{ $org.Domain }}
        - name: FABRIC_CA_CLIENT_TLS_CERTFILES
          value: /{{ $org.Domain }}/fabric-ca/tls-cert.pem

{{- end }} {{- /* PeerOrgs */ -}}{{""}}


# leaf get orderer ca certificate templates
{{- range $i, $org := .Values.OrdererOrgs }}
  - name: get-orderer-ca-cert--{{ $org.Name | lower }}
    inputs:
    retryStrategy:
      limit: {{ $.Values.retryCount }}
    script:
      image: c0deh0use/fabric-ca-client-tools:{{ $.Values.FabricCaClientVersion }}
      #image: hyperledger/fabric-tools:1.4.1
      command: [sh]
      source: |
          if [ ! -d "$ORDERER_CA_MSP_DIR" ]; then

            FABRIC_CA_DYNAMIC_LINK=false
            if [ "\$FABRIC_CA_DYNAMIC_LINK" = "true" ]; then apt-get install -y libltdl-dev; fi

            echo "get orderer ca certificates  with https://"$CA_HOST":7054 -M "$ORG_MSP_DIR
            fabric-ca-client getcacert -d -u https://$CA_HOST:7054 -M $ORDERER_CA_MSP_DIR --tls.certfiles $FABRIC_CA_CLIENT_TLS_CERTFILES

            echo "setting up MSP for "$org.Name

            if [ ! -d $ORDERER_CA_MSP_DIR/tlscacerts ]; then
              mkdir $ORDERER_CA_MSP_DIR/tlscacerts
              cp $ORDERER_CA_MSP_DIR/cacerts/* $ORDERER_CA_MSP_DIR/tlscacerts
            fi

          else
            echo "Org "{{ $org.Name | lower }}" ca certificates exists"
          fi


      volumeMounts:
        - mountPath: /hlf-scripts
          name: hlf-scripts

        - mountPath: /{{ $org.Domain }}
          name: hlf-orderer--{{ $org.Name | lower }}

        - mountPath: /{{ $org.Domain }}/fabric-ca
          name: hlf-ca--{{ $org.Name | lower }}

      env:
        - name: FABRIC_LOGGING_SPEC
          value: {{ $.Values.logLevel }}
        - name: CA_ADMIN_USER
          value: {{ $.Values.ca.userName }}
        - name: CA_ADMIN_PASS
          value: {{ $.Values.ca.password }}
        - name: CA_ADMIN_USER_PASS
          value: {{ $.Values.ca.userName }}:{{ $.Values.ca.password }}
        - name: CA_HOST
          value: hlf-ca--{{ $org.Name | lower }}
        - name: FABRIC_CA_CLIENT_TLS_CERTFILES
          value: /{{ $org.Domain }}/fabric-ca/tls-cert.pem
        - name: ORDERER_CA_MSP_DIR
          value: /{{ $org.Domain }}/ca-admin/msp

{{- end }} {{- /* OrdererOrgs */ -}}{{""}}


    # leaf get orderer ca certificate templates
{{- range $i, $org := .Values.OrdererOrgs }}
  - name: generate-orderer-admin-ca-cert--{{ $org.Name | lower }}
    inputs:
    retryStrategy:
      limit: {{ $.Values.retryCount }}
    script:
      image: c0deh0use/fabric-ca-client-tools:{{ $.Values.FabricCaClientVersion }}
      #image: hyperledger/fabric-tools:1.4.1
      command: [sh]
      source: |
        if [ ! -f "$ORDERER_ADMIN_HOME/{{ printf "admin.%s" $org.Domain }}.finished" ]; then

          mkdir -p "$ORDERER_ADMIN_HOME"
          if [ ! -d $ORDERER_ADMIN_HOME/tls ]; then
            echo "Enrolling admin '$ORDERER_ADMIN_NAME' with $CA_HOST ..."
            fabric-ca-client enroll -d -u https://$ORDERER_ADMIN_NAME:$ORDERER_ADMIN_PASS@$CA_HOST:7054 -M $ORDERER_ADMIN_HOME/msp --caname {{ printf "ca-%s" $org.Name }} --tls.certfiles $FABRIC_CA_CLIENT_TLS_CERTFILES

            fabric-ca-client enroll -d -u https://$ORDERER_ADMIN_NAME:$ORDERER_ADMIN_PASS@$CA_HOST:7054 -M $ORDERER_ADMIN_HOME/tls --caname {{ printf "ca-%s" $org.Name }} --enrollment.profile tls --tls.certfiles $FABRIC_CA_CLIENT_TLS_CERTFILES
            cp $ORDERER_ADMIN_HOME/tls/tlscacerts/* $ORDERER_ADMIN_HOME/tls/ca.crt
            cp $ORDERER_ADMIN_HOME/tls/signcerts/* $ORDERER_ADMIN_HOME/tls/server.crt
            cp $ORDERER_ADMIN_HOME/tls/keystore/* $ORDERER_ADMIN_HOME/tls/server.key

            echo "Orderer Admin CA Certs"
            cat $ORDERER_ADMIN_HOME/msp/cacerts/hlf-ca--{{ $org.Name | lower }}-7054-ca-{{ $org.Name }}.pem
            echo "------------------"
          fi

          if [ -f "$ORDERER_ADMIN_HOME/tls/server.crt" ]; then
            echo "Orderer Admin ($ORDERER_ADMIN_NAME) - $org.Domain DONE" > $ORDERER_ADMIN_HOME/{{ printf "admin.%s" $org.Domain }}.finished
          else
            echo "Didnot/Failed finished orderer admin files"
            exit -1
          fi

          export CORE_PEER_MSPCONFIGPATH=$ORDERER_ADMIN_HOME/msp
          echo "searching for all files in: /{{ $org.Domain }}"
          find /{{ $org.Domain }}
        else
          echo "Org "{{ $org.Name | lower }}" ca certificates exists"
        fi

      volumeMounts:
        - mountPath: /hlf-scripts
          name: hlf-scripts

        - mountPath: /{{ $org.Domain }}
          name: hlf-orderer--{{ $org.Name | lower }}

        - mountPath: /{{ $org.Domain }}/fabric-ca
          name: hlf-ca--{{ $org.Name | lower }}

      env:
        - name: FABRIC_LOGGING_SPEC
          value: {{ $.Values.logLevel }}
        - name: CA_ADMIN_USER
          value: {{ $.Values.ca.userName }}
        - name: CA_ADMIN_PASS
          value: {{ $.Values.ca.password }}
        - name: CA_ADMIN_USER_PASS
          value: {{ $.Values.ca.userName }}:{{ $.Values.ca.password }}
        - name: CA_HOST
          value: hlf-ca--{{ $org.Name | lower }}
        - name: ORDERER_ADMIN_NAME
          value: admin-{{ $org.Name | lower }}
        - name: ORDERER_ADMIN_PASS
          value: admin-{{ $org.Name | lower }}pw
        - name: FABRIC_CA_CLIENT_TLS_CERTFILES
          value: /{{ $org.Domain }}/fabric-ca/tls-cert.pem
        - name: ORDERER_ADMIN_HOME
          value: /{{ $org.Domain }}/orderer-admin

{{- end }} {{- /* OrdererOrgs */ -}}{{""}}

# leaf get peer org ca certificate templates
{{- range $i, $org := .Values.PeerOrgs }}
  - name: get-peer-org-ca-cert--{{ $org.Name | lower }}
    inputs:
    retryStrategy:
      limit: {{ $.Values.retryCount }}
    script:
      image: c0deh0use/fabric-ca-client-tools:{{ $.Values.FabricCaClientVersion }}
      #image: hyperledger/fabric-tools:1.4.1
      command: [sh]
      source: |
          if [ ! -d "$PEER_CA_MSP_DIR/tls" ]; then
            echo "get peer ca certificates  with https://"$CA_HOST":7054 -M "$PEER_MSP_DIR
            fabric-ca-client getcacert -d -u https://$CA_HOST:7054 -M $PEER_CA_MSP_DIR --tls.certfiles $FABRIC_CA_CLIENT_TLS_CERTFILES

            if [ ! -d $PEER_CA_MSP_DIR/tlscacerts ]; then
              mkdir $PEER_CA_MSP_DIR/tlscacerts
              cp $PEER_CA_MSP_DIR/cacerts/* $PEER_CA_MSP_DIR/tlscacerts
            fi

            // enroll Org Admin and store keys to admin folder.
            find "$PEER_ADMIN_DIR/msp"
            if [ ! -d "$PEER_ADMIN_DIR/msp" ]; then
              echo "Enrolling admin '$PEER_ADMIN_NAME' with $CA_HOST ..."
              fabric-ca-client enroll -d -u https://$PEER_ADMIN_NAME:$PEER_ADMIN_PASS@$CA_HOST:7054 -M $PEER_ADMIN_DIR/msp --caname {{ printf "ca-%s" $org.Name }} --tls.certfiles $FABRIC_CA_CLIENT_TLS_CERTFILES
            fi
            export CORE_PEER_MSPCONFIGPATH=$PEER_ADMIN_DIR/msp
            find /{{ $org.Domain | lower }}
          else
            echo "Org "{{ $org.Name | lower }}" ca certificates exists"
          fi  


      volumeMounts:
        #- mountPath: /etc/hyperledger/fabric-ca-server-config/
        #  name: ca-tls
        - mountPath: /hlf-scripts
          name: hlf-scripts

        - mountPath: /{{ $org.Domain | lower }}
          name: hlf-peer-org--{{ $org.Name | lower }}

        - mountPath: /{{ $org.Domain }}/fabric-ca
          name: hlf-ca--{{ $org.Name | lower }}


      env:
        - name: FABRIC_LOGGING_SPEC
          value: {{ $.Values.logLevel }}
        - name: FABRIC_CA_CLIENT_HOME
          value: {{ $org.Domain }}/fabric-ca
        - name: CA_ADMIN_USER
          value: {{ $.Values.ca.userName }}
        - name: CA_ADMIN_PASS
          value: {{ $.Values.ca.password }}
        - name: CA_ADMIN_USER_PASS
          value: {{ $.Values.ca.userName }}:{{ $.Values.ca.password }}
        - name: CA_HOST
          value: hlf-ca--{{ $org.Name | lower }}
        - name: PEER_ADMIN_NAME
          value: admin-{{ $org.Name | lower }}
        - name: PEER_ADMIN_PASS
          value: admin-{{ $org.Name | lower }}pw
        - name: FABRIC_CA_CLIENT_TLS_CERTFILES
          value: /{{ $org.Domain }}/fabric-ca/tls-cert.pem
        - name: PEER_CA_MSP_DIR
          value: /{{ $org.Domain | lower }}/ca-admin/msp
        - name: PEER_ADMIN_DIR
          value: /{{ $org.Domain | lower }}/peer-admin/msp

{{- end }} {{- /* PeerOrgs */ -}}{{""}}


 #leaf generate artifacts template
  - name: generate-channel-artifacts
    inputs:
    retryStrategy:
      limit: {{ $.Values.retryCount }}
    script:
      image: c0deh0use/fabric-tools:{{ $.Values.hyperledgerVersion }}
      command: [sh]
      source: |

          if [ ! -e /channel-artifacts/genesis.block ]; then

            FABRIC_CA_DYNAMIC_LINK=false
            if [ "\$FABRIC_CA_DYNAMIC_LINK" = "true" ]; then apt-get install -y libltdl-dev; fi

            echo "Create channel-artificats directory does not exists"

            {{- range $i, $org := $.Values.OrdererOrgs }}
            echo "find {{ $org.Domain }} system channel configuration"
            find /{{ $org.Domain }}/orderers/
            {{- end }} {{- /* orderer orgs */ -}}{{""}}


            {{- $genesisProfile := $.Values.network.genesisProfile }}
            {{- $systemChannelID := $.Values.network.systemChannelID }}

            echo "-- creating genesis block: {{ $genesisProfile }} for system channel: {{ $systemChannelID }}"
            configtxgen -profile {{ $genesisProfile }} -channelID {{ $systemChannelID }} -configPath /hlf_config/configtx -outputBlock /channel-artifacts/genesis.block

            find /channel-artifacts
            echo "-----------------"
          else
            echo "genesis block exists"
          fi

      volumeMounts:

        - mountPath: /channel-artifacts/
          name: channel-artifacts

        - mountPath: /hlf_config/
          name: hlf-configtx

        {{- range $i, $org := $.Values.OrdererOrgs }}
        - mountPath: /{{ $org.Domain }}
          name: hlf-orderer--{{ $org.Name | lower }}
        {{- end }} {{- /* orderer orgs */ -}}{{""}}

        {{- range $i, $org := $.Values.OrdererOrgs }}
        {{- range $i, $host := $org.Specs }}
        - mountPath: /{{ $org.Domain }}/orderers/{{ printf "%s.%s" ($host.Hostname | lower) $org.Domain }}
          name: hlf-orderer--{{ $org.Name | lower }}--{{ $host.Hostname | lower }}
        {{- end }} {{- /* orderer hosts */ -}}{{""}}
        {{- end }} {{- /* orderer orgs */ -}}{{""}}


        {{- range $i, $org := $.Values.PeerOrgs }}
        - mountPath: /{{ $org.Domain | lower }}
          name: hlf-peer-org--{{ $org.Name | lower }}
        {{- end }} {{- /* peer orgs */ -}}{{""}}


      env:
        - name: FABRIC_LOGGING_SPEC
          value: {{ $.Values.logLevel }}



# leaf order host generate certs templates
{{- range $i, $org := .Values.OrdererOrgs }}
{{- range $i, $host := $org.Specs }}
{{- $ordererHome :=  printf "/%s/orderers/%s.%s" $org.Domain ($host.Hostname | lower) $org.Domain }}
  - name: generate-orderer-host-generate-certs--{{ $org.Name | lower }}--{{ $host.Hostname | lower }}
    inputs:
    retryStrategy:
      limit: {{ $.Values.retryCount }}
    script:
      image: c0deh0use/fabric-ca-client-tools:{{ $.Values.FabricCaClientVersion }}
      command: [sh]
      source: |
          echo "Orderer {{ $host.Hostname | lower }} home dir: {{ $ordererHome }}"
          if [ ! -f "{{ $ordererHome }}/{{ printf "%s.%s" $host.Hostname $org.Domain }}.finished" ]; then
            echo "---------"
            mkdir -p {{ $ordererHome }}

            echo "Enroll $ORDERER_NAME user as orderer type to $CA_HOST:7054"

            echo "Enroll orderer certificate (default profile)"
            fabric-ca-client enroll -d -u "https://$ORDERER_NAME:$ORDERER_PASS@$CA_HOST:7054" --caname {{ printf "ca-%s" $org.Name }} -M $ORDERER_GENERAL_LOCAL_MSP_DIR --csr.hosts $ORDERER_HOST --csr.hosts localhost --tls.certfiles $FABRIC_CA_CLIENT_TLS_CERTFILES

            echo "Enroll again to get the orderer's enrollment certificate (tls profile)"
            fabric-ca-client enroll -d -u "https://$ORDERER_NAME:$ORDERER_PASS@$CA_HOST:7054" --caname {{ printf "ca-%s" $org.Name }} -M $ORDERER_GENERAL_LOCAL_TLS_DIR --csr.hosts $ORDERER_HOST --csr.hosts localhost --enrollment.profile tls --tls.certfiles $FABRIC_CA_CLIENT_TLS_CERTFILES

            cp {{ $ordererHome }}/tls/keystore/* $ORDERER_GENERAL_TLS_PRIVATEKEY
            cp {{ $ordererHome }}/tls/signcerts/* $ORDERER_GENERAL_TLS_CERTIFICATE
            cp {{ $ordererHome }}/tls/tlscacerts/* $ORDERER_GENERAL_CA_CERTIFICATE

            echo "Orderer CA Certs"
            cat {{ $ordererHome }}/tls/signcerts/cert.pem
            echo "------------------"

            echo "NodeOUs:
            Enable: true
            ClientOUIdentifier:
              Certificate: cacerts/hlf-ca--{{ $org.Name | lower }}-7054-ca-{{ $org.Name }}.pem
              OrganizationalUnitIdentifier: client
            PeerOUIdentifier:
              Certificate: cacerts/hlf-ca--{{ $org.Name | lower }}-7054-ca-{{ $org.Name }}.pem
              OrganizationalUnitIdentifier: peer
            AdminOUIdentifier:
              Certificate: cacerts/hlf-ca--{{ $org.Name | lower }}-7054-ca-{{ $org.Name }}.pem
              OrganizationalUnitIdentifier: admin
            OrdererOUIdentifier:
              Certificate: cacerts/hlf-ca--{{ $org.Name | lower }}-7054-ca-{{ $org.Name }}.pem
              OrganizationalUnitIdentifier: orderer" >> $ORDERER_GENERAL_LOCAL_MSP_DIR/orderer_node_ou-config.yaml

            echo "------"
            cat $ORDERER_GENERAL_LOCAL_MSP_DIR/config.yaml
            echo "------"
            echo "------"
            echo "------"
            echo "Finish setting up the local MSP for the orderer"

            if [ ! -d $ORDERER_GENERAL_LOCAL_MSP_DIR/tlscacerts ]; then
              mkdir $ORDERER_GENERAL_LOCAL_MSP_DIR/tlscacerts
              cp $ORDERER_GENERAL_LOCAL_MSP_DIR/cacerts/* $ORDERER_GENERAL_LOCAL_MSP_DIR/tlscacerts
            fi

            if [ -f "$ORDERER_GENERAL_TLS_CERTIFICATE" ]; then
              echo "Orderer - {{ printf "%s.%s" $host.Hostname $org.Domain }} DONE" > {{ $ordererHome }}/{{ printf "%s.%s" $host.Hostname $org.Domain }}.finished
            else
              echo "Didnot/Failed finished orderer host files"
              exit -1
            fi

            echo "searching for all files in: {{ $ordererHome }}"
            find {{ $ordererHome }}
          else
            echo {{ $org.Name | lower }}--{{ $host.Hostname | lower }}" certificates exists already"
          fi


      volumeMounts:
        - mountPath: /hlf-scripts
          name: hlf-scripts

        - mountPath: /{{ $org.Domain }}/orderers/{{ printf "%s.%s" ($host.Hostname | lower) $org.Domain }}
          name: hlf-orderer--{{ $org.Name | lower }}--{{ $host.Hostname | lower }}

        - mountPath: /{{ $org.Domain }}/fabric-ca
          name: hlf-ca--{{ $org.Name | lower }}

      env:
        - name: FABRIC_LOGGING_SPEC
          value: debug
        - name: ORDERER_GENERAL_TLS_PRIVATEKEY
          value: {{ $ordererHome }}/tls/server.key
        - name: ORDERER_GENERAL_TLS_CERTIFICATE
          value: {{ $ordererHome }}/tls/server.crt
        - name: ORDERER_GENERAL_CA_CERTIFICATE
          value: {{ $ordererHome }}/tls/ca.crt
        - name: ORDERER_GENERAL_LOCAL_MSP_DIR
          value: {{ $ordererHome }}/msp
        - name: ORDERER_GENERAL_LOCAL_TLS_DIR
          value: {{ $ordererHome }}/tls
        - name: CA_HOST
          value: hlf-ca--{{ $org.Name | lower }}
        - name: ORDERER_NAME
          value: {{ $host.Hostname }}-{{ $org.Name | lower }}
        - name: ORDERER_PASS
          value: {{ $host.Hostname }}-{{ $org.Name | lower }}pw
        - name: FABRIC_CA_CLIENT_HOME
          value: /{{ $org.Domain }}/fabric-ca
        - name: FABRIC_CA_CLIENT_TLS_CERTFILES
          value: /{{ $org.Domain }}/fabric-ca/tls-cert.pem
        - name : ORDERER_HOST
          value: {{ $host.Hostname | lower }}.{{ $org.Domain | lower }}


{{- end }} {{- /* hosts */ -}}{{""}}
{{- end }} {{- /* ordererOrgs */ -}}{{""}}


# leaf generate peer certificates template
{{- range $i, $org := .Values.PeerOrgs }}
{{- range $peerIndex := until ($org.Template.Count | int) }}
{{- $peer := (printf "peer%s" ($peerIndex | toString)) }}
{{- $peerHome :=  printf "/%s/peers/%s.%s" $org.Domain $peer $org.Domain }}
  - name: peer-generate-certs--{{ $org.Name | lower }}--{{ $peer | lower }}
    inputs:
    retryStrategy:
      limit: {{ $.Values.retryCount }}
    script:
      image: c0deh0use/fabric-ca-client-tools:{{ $.Values.FabricCaClientVersion }}
      #image: hyperledger/fabric-tools:1.4.1
      command: [sh]
      source: |
          if [ ! -f "{{ $peerHome }}/{{ printf "%s.%s" $peer $org.Domain }}.finished" ]; then
            echo "---------"
            mkdir -p {{ printf "/%s" $org.Domain }}
            mkdir -p {{ printf "/%s/peers" $org.Domain }}
            mkdir -p {{ $peerHome }}

            echo "Enroll peer"
            fabric-ca-client enroll -d -u "https://$PEER_NAME:$PEER_PASS@$CA_HOST:7054" -M $PEER_GENERAL_LOCALMSPDIR --caname {{ printf "ca-%s" $org.Name }} --csr.hosts $PEER_HOST --tls.certfiles $FABRIC_CA_CLIENT_TLS_CERTFILES
            echo "---------"

            echo "NodeOUs:
            Enable: true
            ClientOUIdentifier:
              Certificate: cacerts/hlf-ca--{{ $org.Name | lower }}-7054-ca-{{ $org.Name }}.pem
              OrganizationalUnitIdentifier: client
            PeerOUIdentifier:
              Certificate: cacerts/hlf-ca--{{ $org.Name | lower }}-7054-ca-{{ $org.Name }}.pem
              OrganizationalUnitIdentifier: peer
            AdminOUIdentifier:
              Certificate: cacerts/hlf-ca--{{ $org.Name | lower }}-7054-ca-{{ $org.Name }}.pem
              OrganizationalUnitIdentifier: admin
            OrdererOUIdentifier:
              Certificate: cacerts/hlf-ca--{{ $org.Name | lower }}-7054-ca-{{ $org.Name }}.pem
              OrganizationalUnitIdentifier: orderer
            " >> "$PEER_GENERAL_LOCALMSPDIR/config.yaml"

            echo "Enroll peer TLS cert (using the "tls" profile)"
            fabric-ca-client enroll -d -u "https://$PEER_NAME:$PEER_PASS@$CA_HOST:7054" -M {{ $peerHome }}/tls --caname {{ printf "ca-%s" $org.Name }} --enrollment.profile tls --csr.hosts $PEER_HOST --csr.hosts localhost --tls.certfiles $FABRIC_CA_CLIENT_TLS_CERTFILES
            echo "---------"

            echo "Copy the TLS key and cert to the appropriate place"
            find {{ $peerHome }}
            echo "---------"
            cp {{ $peerHome }}/tls/tlscacerts/* {{ $peerHome }}/tls/ca.crt
            cp {{ $peerHome }}/tls/signcerts/* {{ $peerHome }}/tls/server.crt
            cp {{ $peerHome }}/tls/keystore/* {{ $peerHome }}/tls/server.key

            echo "Finish setting up the local MSP for the peer"

            if [ ! -d $PEER_GENERAL_LOCALMSPDIR/tlscacerts ]; then
              mkdir -p $PEER_GENERAL_LOCALMSPDIR/tlscacerts
              cp {{ $peerHome }}/msp/cacerts/* $PEER_GENERAL_LOCALMSPDIR/tlscacerts
            fi

            echo "find in {{ $peerHome }}"
            find {{ $peerHome }}
            echo "-------------"

            if [ -f "{{ $peerHome }}/tls/server.crt" ]; then
              echo "Peer - {{ printf "%s.%s" $peer $org.Domain }} DONE" > {{ $peerHome }}/{{ printf "%s.%s" $peer $org.Domain }}.finished
            else
              echo "Didnot/Failed finished peer host files"
              exit -1
            fi

          else
            echo {{ $org.Name | lower }}--{{ $peer | lower }}" certificates exists already"
          fi


      volumeMounts:
        #- mountPath: /etc/hyperledger/fabric-ca-server-config/
        #  name: ca-tls
        - mountPath: /hlf-scripts
          name: hlf-scripts

        - mountPath: /{{ $org.Domain | lower }}
          name: hlf-peer-org--{{ $org.Name | lower }}

        - mountPath: {{ $peerHome }}
          name: hlf-peer--{{ $org.Name | lower }}--{{ $peer | lower }}

        - mountPath: /{{ $org.Domain }}/fabric-ca
          name: hlf-ca--{{ $org.Name | lower }}


      env:
        - name: FABRIC_LOGGING_SPEC
          value: debug
        - name: PEER_GENERAL_LOCALMSPDIR
          value: {{ $peerHome }}/msp
        - name: CA_HOST
          value: hlf-ca--{{ $org.Name | lower }}
        - name: PEER_NAME
          value: {{ $peer }}-{{ $org.Name | lower }}
        - name: PEER_PASS
          value: {{ $peer }}-{{ $org.Name | lower }}pw
        - name: FABRIC_CA_CLIENT_HOME
          value: /{{ $org.Domain }}/fabric-ca
        - name: FABRIC_CA_CLIENT_TLS_CERTFILES
          value: /{{ $org.Domain }}/fabric-ca/tls-cert.pem
        - name : PEER_HOST
          value: {{ $peer | lower }}.{{ $org.Domain | lower }}


{{- end }} {{- /* peer */ -}}{{""}}
{{- end }} {{- /* Orgs */ -}}{{""}}


---
